name: Batch Release
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New version (e.g. v0.4.0)'
        required: true

jobs:
  batch-release:
    runs-on: ubuntu-latest
    env:
      ORG: "farseer-go"  # 替换为你的 GitHub 组织或用户名
      REPO_LIST: "fs collections tasks utils mapper webapi eventBus queue linkTrace cache cacheMemory data docker elasticSearch etcd rabbit redis fSchedule monitor"  # 直接在此列出所有组件仓库名
    steps:
      - name: Validate Input
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ 错误：版本号必须是 vX.Y.Z 格式（如 v0.4.0）"
            exit 1
          fi
      - name: Install GitHub CLI
        run: |
            sudo apt-get update
            sudo apt-get install -y gh

      - name: Batch Update and Release
        run: |
          set -euxo pipefail  # 启用详细日志和严格错误检查
          NEW_VERSION="${{ github.event.inputs.version }}"

          # 转换为数组并处理空格分隔的仓库列表
          read -ra REPOS <<< "$REPO_LIST"

          for REPO in "${REPOS[@]}"; do
            echo "🟡 🟡 🟡 🟡 🟡 🟡 正在处理仓库: $REPO🟡 🟡 🟡 🟡 🟡 🟡 "

            # 克隆仓库
            TEMP_DIR=$(mktemp -d)
            git clone "https://${{ secrets.RELEASE_PAT }}@github.com/$ORG/$REPO.git" "$TEMP_DIR"
            cd "$TEMP_DIR"

            go get -u && go mod tidy

            # 遍历所有需要更新的依赖组件
            for DEP in "${REPOS[@]}"; do
                # 精准替换依赖版本（避免误改其他模块）
                sed -i "s|github.com/$ORG/$DEP v[0-9]\+.[0-9]\+.[0-9]\+|github.com/$ORG/$DEP $NEW_VERSION|g" go.mod
            done

            # 提交【主模块】更改
            git config user.name "Release Bot"
            git config user.email "bot@example.com"
            git add .
            if ! git commit -m "chore: update dependencies to $NEW_VERSION"; then
              echo "🟡 无变更需要提交: $REPO"
            fi
            
            # 创建【主模块】新标签
            git tag -f "$NEW_VERSION"
            git push origin main --force
            git push origin "$NEW_VERSION" --force
            
            # 根据仓库类型定义子模块路径
            case "$REPO" in
                data)
                SUB_MODULES=("driver/clickhouse" "driver/sqlite" "driver/postgres" "driver/sqlserver")
                ;;
                webapi)
                SUB_MODULES=("session-redis")
                ;;
                *)
                SUB_MODULES=()
                ;;
            esac

            # 递归处理所有指定模块
            for SUB_PATH in "${SUB_MODULES[@]}"; do
                if [[ -f "$SUB_PATH/go.mod" ]]; then
                echo "🔧 处理模块: $SUB_PATH"
                pushd "$SUB_PATH" > /dev/null

                go get -u && go mod tidy

                # 遍历所有需要更新的依赖组件
                for DEP in "${REPOS[@]}"; do
                    # 精准替换依赖版本（避免误改其他模块）
                    sed -i "s|github.com/$ORG/$DEP v[0-9]\+.[0-9]\+.[0-9]\+|github.com/$ORG/$DEP $NEW_VERSION|g" go.mod
                done
                
                # 提交【子模块】更改
                git add .
                if ! git commit -m "chore: update dependencies to $NEW_VERSION"; then
                    echo "🟡 无变更需要提交: $REPO"
                fi

                # 创建【子模块】新标签
                git tag -f "$SUB_PATH/$NEW_VERSION"
                git push origin "$SUB_PATH/$NEW_VERSION" --force

                popd > /dev/null
                else
                    echo "⏩ 跳过无效路径: $SUB_PATH"
                fi
            done

            # 检查 Release 是否已存在
            if gh release view "$NEW_VERSION" --repo "$ORG/$REPO" >/dev/null 2>&1; then
                echo "🟡 Release $NEW_VERSION 已存在，跳过创建"
            else
                # 创建 GitHub Release（无需显式登录）
                gh release create "$NEW_VERSION" --title "$NEW_VERSION" --notes "Release version $NEW_VERSION" --repo "$ORG/$REPO"
            fi

            # 清理临时目录
            cd ..
            rm -rf "$TEMP_DIR"
          done

          echo "✅ 所有仓库已更新至 $NEW_VERSION"
        env:
            GH_TOKEN: ${{ secrets.RELEASE_PAT }}  # 必须设置
            GITHUB_TOKEN: ${{ secrets.RELEASE_PAT }}  # 双重保障